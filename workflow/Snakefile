import pandas as pd
from snakemake.utils import validate
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider

HTTP = HTTPRemoteProvider()

configfile: "config/config.yaml"
print(config)
validate(config, schema="schemas/config.schema.yaml")

samples = (
    pd.read_csv(config["samples"], sep="\t", dtype={"sample_name": str})
    .set_index("sample_name", drop=False)
    .sort_index()
)
validate(samples, schema="schemas/samples.schema.yaml")

units = (
    pd.read_csv(config["units"],
                sep="\t",
                dtype={"sample_name": str, "unit_name": str})
    .set_index(["sample_name", "unit_name"], drop=False)
    .sort_index()
)
validate(units, schema="schemas/units.schema.yaml")

t0 = samples.timepoint.min()
timepoints = list(samples[samples.timepoint != t0].timepoint.unique())
genotypes = list(samples.genotype.unique())

fa_prfx, _ = os.path.splitext(os.path.basename(config["guides"]))
guides_fasta = os.path.join("resources", fa_prfx + '.fa')
bt_idx = os.path.join("resources",
                      "bowtie_index",
                      os.path.splitext(os.path.basename(guides_fasta))[0])
all_output = ["results/plots/bagel_pr_curve.pdf",
              "results/plots/bagel_ess_neg_dist.pdf",
              "results/plots/jacks_pr_curve.pdf",
              "results/plots/jacks_ess_neg_dist.pdf"]
if config.get('control_genotype') is not None:
    all_output.append("results/regression_analyses/regression_hits.xlsx")


rule all:
    input:
        all_output


include: "rules/guide_mapping.smk"
include: "rules/read_counts.smk"
include: "rules/gene_essentiality.smk"
