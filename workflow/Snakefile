import pandas as pd
from snakemake.utils import validate
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider

HTTP = HTTPRemoteProvider()

configfile: "config/config.yaml"
print(config)
validate(config, schema="schemas/config.schema.yaml")

samples = (
    pd.read_csv(config["samples"], sep="\t", dtype={"sample_name": str})
    .set_index("sample_name", drop=False)
    .sort_index()
)
validate(samples, schema="schemas/samples.schema.yaml")

units = (
    pd.read_csv(config["units"],
                sep="\t",
                dtype={"sample_name": str, "unit_name": str})
    .set_index(["sample_name", "unit_name"], drop=False)
    .sort_index()
)
validate(units, schema="schemas/units.schema.yaml")

local_guides_xlsx = os.path.join(
    "resources",
    os.path.basename(config["guides"]))
fa_prfx, _ = os.path.splitext(os.path.basename(config["guides"]))
guides_fasta = os.path.join("resources", fa_prfx + '.fa')
bt_idx = os.path.join("resources",
                      "bowtie_index",
                      os.path.splitext(os.path.basename(guides_fasta))[0])

def get_original_fastq(wildcards):
    """Get fastq files of given sample-unit."""
    return units.loc[(wildcards.sample_name, wildcards.unit_name), ["fq1"]].dropna()


def get_trimmed_fastq(wildcards):
    """Get fastq files of given sample-unit."""
    fq = get_original_fastq(wildcards)
    return os.path.join("trimmed_fastq",
                        "{}-{}-trimmed.fastq.gz".format(wildcards.sample_name,
                                                        wildcards.unit_name))


def get_fastq(wildcards):
    """Get fastq files of given sample-unit."""
    if config.get('trim', 0) == 0 and config.get('max_length', 20) >= 20:
        return get_original_fastq(wildcards)
    return get_trimmed_fastq(wildcards)


def all_alignments(wildcards):
    return ["alignments/{}-{}.bam".format(sample, unit) for (sample, unit) in
            units.index]


def all_read_counts(wildcards):
    return ["results/read_counts/{}-{}_counts.csv".format(sample, unit) for (sample, unit)
            in units.index]


rule all:
    input:
        "results/plots/lorenz_curves_t0.pdf",
        "results/plots/guide_counts_t0.pdf",
        "results/plots/guide_counts_all.pdf"

rule download_guides:
    input:
        HTTP.remote(config["guides"], keep_local=True)
    output:
        local_guides_xlsx
    log:
        "logs/download_guides.log"
    run:
        shell("mv {input} {local_guides_xlsx} 2> {log}")

rule build_reference:
    input:
        local_guides_xlsx
    output:
        guides_fasta
    conda:
        "envs/pandas.yaml"
    log:
        "logs/build_reference.log"
    script:
        "scripts/ref_from_xlsx.py"

rule index_reference:
    input:
        guides_fasta
    params:
        prefix = bt_idx,
    output:
        ebwt1 = bt_idx + '.1.ebwt',
        ebwt2 = bt_idx + '.2.ebwt',
        ebwt3 = bt_idx + '.3.ebwt',
        ebwt4 = bt_idx + '.4.ebwt',
        ebwtrev1 = bt_idx + '.rev.1.ebwt',
        ebwtrev2 = bt_idx + '.rev.2.ebwt'
    log:
        "logs/index_reference.log"
    conda:
        "envs/bowtie.yaml"
    shell:
        "bowtie-build --threads {threads} -f {input} {params.prefix} 2>&1 >{log}"

rule trim_fastq:
    input:
        get_original_fastq
    output:
        "trimmed_fastq/{sample_name}-{unit_name}-trimmed.fastq.gz"
    log:
        "logs/trim_fq/{sample_name}_{unit_name}.log"
    conda:
        "envs/pandas.yaml"
    script:
        "scripts/trim_fq.py"

rule bowtie_map:
    input:
        fq = get_fastq,
        ebwt1 = bt_idx + '.1.ebwt',
        ebwt2 = bt_idx + '.2.ebwt',
        ebwt3 = bt_idx + '.3.ebwt',
        ebwt4 = bt_idx + '.4.ebwt',
        ebwtrev1 = bt_idx + '.rev.1.ebwt',
        ebwtrev2 = bt_idx + '.rev.2.ebwt'
    params:
        ref_idx = bt_idx
    output:
        "alignments/{sample_name}-{unit_name}.bam"
    log:
        "logs/bowtie_map/{sample_name}_{unit_name}.log"
    conda:
        "envs/bowtie.yaml"
    resources:
        tmpdir="tmp"
    shell:
        "(bowtie -m 1 -v 2 -p {threads} {params.ref_idx} {input.fq} -S | "
        "samtools sort -O BAM "
        "-T tmp/{wildcards.sample_name}_{wildcards.unit_name} - )"
        "> {output} 2> {log}"

rule count_reads:
    input:
        "alignments/{sample_name}-{unit_name}.bam",
        guides_fasta
    output:
        read_counts = "results/read_counts/{sample_name}-{unit_name}_counts.csv",
        map_counts = "results/read_counts/{sample_name}-{unit_name}_mapped.csv"
    log:
        "logs/read_counts/{sample_name}_{unit_name}.log"
    conda:
        "envs/pandas.yaml"
    script:
        "scripts/read_counts_from_bam.py"

rule combine_read_counts:
    input:
        all_read_counts
    output:
        "results/read_counts_per_sample.csv.gz",
        "results/read_counts_per_alignment.csv.gz"
    conda:
        "envs/pandas.yaml"
    script:
        "scripts/combine_read_counts.py"

rule plot_guide_counts:
    input:
        "results/read_counts_per_sample.csv.gz",
    output:
        "results/plots/lorenz_curves_t0.pdf",
        "results/plots/guide_counts_t0.pdf",
        "results/plots/guide_counts_all.pdf"
    conda:
        "envs/stats.yaml"
    notebook:
        "notebooks/guide_plots.py.ipynb"
