import pandas as pd
from snakemake.utils import validate
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
HTTP = HTTPRemoteProvider()

configfile: "config/config.yaml"
print(config)
validate(config, schema="schemas/config.schema.yaml")

samples = (
    pd.read_csv(config["samples"], sep="\t", dtype={"sample_name": str})
    .set_index("sample_name", drop=False)
    .sort_index()
)
validate(samples, schema="schemas/samples.schema.yaml")

units = (
    pd.read_csv(config["units"], sep="\t", dtype={"sample_name": str, "unit_name": str})
    .set_index(["sample_name", "unit_name"], drop=False)
    .sort_index()
)
validate(units, schema="schemas/units.schema.yaml")

ref_dir = os.path.dirname(config["guides"]["fasta"])
local_guides_xlsx = os.path.join(ref_dir, os.path.basename(config["guides"]["remote_xlsx"]))

def get_fastq(wildcards):
    """Get fastq files of given sample-unit."""
    return units.loc[(wildcards.sample_name, wildcards.unit_name), ["fq1"]].dropna()


def all_alignments(wildcards):
    return ["alignments/{}-{}.bam".format(sample, unit) for (sample, unit) in
            units.index]


def all_read_counts(wildcards):
    return ["results/{}-{}_counts.csv".format(sample, unit) for (sample, unit)
            in units.index]

rule all:
    input:
        "results/plots/read_counts.pdf"


rule download_guides:
    input:
        HTTP.remote(config["guides"]["remote_xlsx"], keep_local=True)
    output:
        local_guides_xlsx
    log:
        "logs/download_guides.log"
    run:
        shell("mv {input} {local_guides_xlsx}")

rule build_reference:
    input:
        local_guides_xlsx
    output:
        config["guides"]["fasta"]
    log:
        "logs/build_reference.log"
    script:
        "scripts/ref_from_xlsx.py"

rule index_reference:
    input:
        config["guides"]["fasta"]
    params:
        prefix = config["guides"]["bt_idx"],
    output:
        ebwt = config["guides"]["bt_idx"] + '.1.ebwt' 
    log:
        "logs/index_reference.log"
    shell:
        "bowtie-build --threads {threads} -f {input} {params.prefix}"

rule bowtie_map:
    input:
        fq = get_fastq,
        ebwt = config["guides"]["bt_idx"] + '.1.ebwt'
    params:
        ref_idx = config["guides"]["bt_idx"]
    output:
        "alignments/{sample_name}-{unit_name}.bam"
    log:
        "logs/bowtie_map/{sample_name}_{unit_name}.log"
    shell:
        "bowtie -m 1 -v 2 -p {threads} {params.ref_idx} {input.fq} -S | "
        "samtools sort -O BAM -T tmp/{wildcards.sample_name}_{wildcards.unit_name} - > {output}"

rule count_reads:
    input:
        "alignments/{sample_name}-{unit_name}.bam",
        config["guides"]["fasta"]
    output:
        read_counts = "results/{sample_name}-{unit_name}_counts.csv",
        map_counts = "results/{sample_name}-{unit_name}_mapped.csv"
    log:
        "logs/read_counts/{sample_name}_{unit_name}.log"
    script:
        "scripts/read_counts_from_bam.py"

rule plot_counts:
    input:
        all_read_counts
    output:
        "results/plots/read_counts.pdf"
    script:
        "scripts/plot_guide_counts.py"
